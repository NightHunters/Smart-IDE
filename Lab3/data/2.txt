   });
  }
 
- private tokenizeRange(model: ITextModel, start: number, end: number, isCompleteDocument?: boolean) {
+ private tokenizeRange(model: ITextModel, start: number, end: number) {
   for (let lineNumber = start, len = end; lineNumber <= len; ++lineNumber) {
    const lineContent = model.getLineContent(lineNumber);
 
    // If line is too long then skip the line
    if (lineContent.length > MAX_TOKENIZATION_LINE_LEN) {
     continue;
    }
-   if (isCompleteDocument) {
+   if (start === 1 && end === model.getLineCount()) {
     model.forceTokenization(lineNumber);
    }
    const lineTokens = model.getLineTokens(lineNumber);
 
  private tokenizeCompleteDocument(model: ITextModel): void {
   // For every word in every line, map its ranges for fast lookup
-  this.tokenizeRange(model, 1, model.getLineCount(), true);
+  this.tokenizeRange(model, 1, model.getLineCount());
  }
 
  private getWordToPositionsMap(): Map<string, Position[]> {
 
    this.tokenizeViewPort(model);
 
-   this.editor.onDidScrollChange(() => {
+   this.toDispose.push(this.editor.onDidScrollChange(() => {
     this.editor.getVisibleRanges().forEach(visibleRange => {
      if (model.isCheapToTokenize(visibleRange.endLineNumber)) {
       this.tokenizeCompleteDocument(model);
-     }
-     else {
+     } else {
       this.tokenizeViewPort(model);
      }
     });
-   });
+   }));
   }
 
   return this.wordToLineNumbersMap;
